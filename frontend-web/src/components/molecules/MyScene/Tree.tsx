/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 tree.glb --types 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    polySurface11: THREE.Mesh
    Wood_Branch: THREE.Mesh
    polySurface9: THREE.Mesh
    polySurface7: THREE.Mesh
    polySurface5: THREE.Mesh
    polySurface3: THREE.Mesh
    polySurface1: THREE.Mesh
  }
  materials: {
    ['Green Leaves']: THREE.MeshStandardMaterial
    ['Wood Branch']: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function TreeModel(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/tree.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.016}>
        <mesh geometry={nodes.polySurface1.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.polySurface3.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.polySurface5.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.polySurface7.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.polySurface9.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.polySurface11.geometry} material={materials['Green Leaves']} />
        <mesh geometry={nodes.Wood_Branch.geometry} material={materials['Wood Branch']} />
      </group>
    </group>
  )
}

useGLTF.preload('/tree.glb')
